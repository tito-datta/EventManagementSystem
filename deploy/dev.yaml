---
# PersistentVolume for Redis data
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-data
spec:
  capacity:
    storage: 128Mi  
  accessModes:
    - ReadWriteOnce 
  persistentVolumeReclaimPolicy: Retain  
  storageClassName: manual  
  hostPath:
    path: "/data/redis"  
    type: DirectoryOrCreate

---
# PersistentVolumeClaim for Redis data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 128Mi 

---
# Deployment for the application with Redis sidecar
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-with-redis-sidecar
  labels:
    app: app-with-redis-sidecar
spec:
  replicas: 1 
  selector:
    matchLabels:
      app: app-with-redis-sidecar
  template:
    metadata:
      labels:
        app: app-with-redis-sidecar
    spec:
      containers:      
      # organisation service container
      - name: organisation-service
        image: localhost/organisation-service:jammy
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Production"
        - name: DEBUG
          value: "true"
        - name: Redis
          value: "redis://host.containers.internal:6379" 
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi

      # Redis sidecar container
      - name: redis-sidecar
        image: docker.io/redis/redis-stack:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6379  
        volumeMounts:
        - name: redis-db
          mountPath: /data  
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi

      # Volumes for the pod
      volumes:
      - name: redis-db
        persistentVolumeClaim:
          claimName: redis-data-claim  

---
# Service to expose the app services
apiVersion: v1
kind: Service
metadata:
  name: ems-dev-service
spec:
  type: ClusterIP 
  ports:
  - port: 8080
    targetPort: 5000
    name: organisation-service
  - port: 8001
    targetPort: 8001
    name: redis-sidecar
  selector:
    app: app-with-redis-sidecar